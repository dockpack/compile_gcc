---
# tasks file for compile_gcc

- name: Print out operating system details
  debug:
    msg: >-
      os_family:
      {{ ansible_os_family }},
      distro:
      {{ ansible_distribution }}
      {{ ansible_distribution_version }},
      kernel:
      {{ ansible_kernel }}

- name: Include version-specific variables for CentOS/RHEL.
  include_vars: "RedHat-{{ ansible_distribution_version.split('.')[0] }}.yml"
  when: ansible_distribution == 'CentOS' or
        ansible_distribution == 'Red Hat Enterprise Linux' or
        ansible_distribution == 'RedHat'

- name: Install rpms_for_compiling_gcc
  yum:
    name: "{{ rpms_for_compiling_gcc }}"
    state: present
  register: network_access
  until: network_access is success
  delay: 2
  retries: 10

- name: Install rpms_for_testing_gcc
  when: test_gcc|bool
  yum:
    name: "{{ rpms_for_testing_gcc }}"
    state: present
  register: network_access
  until: network_access is success
  delay: 2
  retries: 10
  tags:
    - test

- name: Create download directory
  file:
    path: /tmp/compile_gcc
    state: directory
    owner: root
    group: root
    mode: 0700

- name: Download Binutils source
  get_url:
    url: "{{ binutils_url }}"
    dest: "/tmp/compile_gcc/binutils-{{ binutilsver }}.tar.bz2"
    mode: 0755
    validate_certs: false
  register: download_binutils
  until: download_binutils is succeeded
  delay: 2
  retries: 10

- name: Unpack Binutils source
  unarchive:
    src: "/tmp/compile_gcc/binutils-{{ binutilsver }}.tar.bz2"
    dest: "{{ prefix }}/src"
    mode: u=rwX,g=rX,o=rX
    creates: "{{ prefix }}/src/binutils-{{ binutilsver }}"
    copy: false

- name: Download GCC source
  get_url:
    url: "{{ gcc_url }}"
    dest: "/tmp/compile_gcc/gcc-{{ GCCVER }}.tar.gz"
    mode: 0755
    validate_certs: "{{ gcc_mirror_url_signed }}"
  register: download_gcc_src
  until: download_gcc_src is succeeded
  delay: 3
  retries: 3

- name: Unarchive GCC source
  unarchive:
    src: "/tmp/compile_gcc/gcc-{{ GCCVER }}.tar.gz"
    dest: "{{ prefix }}/src"
    mode: u=rwX,g=rX,o=rX
    creates: "{{ prefix }}/src/gcc-{{ GCCVER }}"
    copy: false

- name: Download GCC dependencies
  get_url:
    url: "{{ dependencies_url }}{{ item.file }}"
    checksum: "md5:{{ item.md5 }}"
    dest: "{{ prefix }}/src/gcc-{{ GCCVER }}/{{ item.file }}"
    validate_certs: "{{ dependencies_url_signed }}"
  loop: "{{ dependencies }}"
  loop_control:
    label: "{{ dependencies_url }}{{ item.file }}"

- name: Unarchive GCC dependencies
  unarchive:
    src: "{{ prefix }}/src/gcc-{{ GCCVER }}/{{ item.file }}"
    dest: "{{ prefix }}/src/gcc-{{ GCCVER }}/"
    mode: u=rwX,g=rX,o=rX
    creates: "{{ prefix }}/src/gcc-{{ GCCVER }}/{{ item.dir }}"
    copy: false
  loop: "{{ dependencies }}"
  loop_control:
    label: "{{ prefix }}/src/gcc-{{ GCCVER }}/{{ item.dir }}"

- name: Symlink GCC dependencies
  file:
    src: "{{ prefix }}/src/gcc-{{ GCCVER }}/{{ item.dir }}"
    path: "{{ prefix }}/src/gcc-{{ GCCVER }}/{{ item.name }}"
    state: link
    mode: 0777
  loop: "{{ dependencies }}"
  loop_control:
    label: "{{ prefix }}/src/gcc-{{ GCCVER }}/{{ item.name }}"

- name: Source devtoolset enable file
  when: collections_enabled and ansible_os_family == 'RedHat'
  set_fact:
    cmd_env: "source /opt/rh/{{ cplusplus_devtoolset }}/enable && "

- name: Check binutils config.status
  stat:
    path: "{{ prefix }}/src/binutils-{{ binutilsver }}/config.status"
  register: binutils_config

- name: Configure Binutils
  shell: "{{ cmd_env | default('') }} ./configure"
  args:
    chdir: "{{ prefix }}/src/binutils-{{ binutilsver }}"
  when: not binutils_config.stat.exists
  tags:
    - skip_ansible_lint

- name: Make Binutils
  shell: "{{ cmd_env | default('') }} make -j {{ ansible_processor_vcpus }}"
  args:
    chdir: "{{ prefix }}/src/binutils-{{ binutilsver }}"
    creates: "{{ prefix }}/src/binutils-{{ binutilsver }}/ld/ld-new"
  tags:
    - skip_ansible_lint

- name: Install Binutils
  command: make install
  args:
    chdir: "{{ prefix }}/src/binutils-{{ binutilsver }}"
    creates: "{{ prefix }}/bin/strip"

- name: Unpack dejagnu source
  when: test_gcc|bool
  unarchive:
    src: "{{ dejagnu_url }}"
    remote_src: true
    dest: "{{ prefix }}/src"
    mode: u=rwX,g=rX,o=rX
    creates: "{{ prefix }}/src/dejagnu-{{ dejagnu_ver }}"
  tags:
    - test

- name: Install dejagnu
  when: test_gcc|bool
  script: config_make_install.sh
  args:
    chdir: "{{ prefix }}/src/dejagnu-{{ dejagnu_ver }}"
    creates: "{{ prefix }}/bin/dejagnu"
  tags:
    - test

- name: Create directory
  file:
    path: "{{ prefix }}/src/build"
    state: directory
    mode: 0755

- name: Configure GCC source
  shell: "{{ cmd_env | default('') }} ../gcc-{{ GCCVER }}/configure \
          {{ gcc_configure }}"
  args:
    executable: /bin/bash
    chdir: "{{ prefix }}/src/build"
    creates: "{{ prefix }}/src/build/config.status"
  tags:
    - skip_ansible_lint

- name: Make GCC with libgcc_s.so.1 as evidence
  shell: "{{ cmd_env | default('') }} make -j {{ ansible_processor_vcpus }}"
  args:
    executable: /bin/bash
    chdir: "{{ prefix }}/src/build"
    creates: "{{ prefix }}/src/build/gcc/libgcc_s.so.1"
  tags:
    - skip_ansible_lint

- name: Test GCC C++ compiler
  when: test_gcc|bool
  command: make -j {{ ansible_processor_vcpus }} check-c++
  args:
    chdir: "{{ prefix }}/src/build"
    creates: "{{ prefix }}/src/build/gcc/testsuite/g++/g++.sum"
  tags:
    - test

- name: Install GCC with cxxabi.h as evidence
  become: true
  become_user: root
  command: "make -j {{ ansible_processor_vcpus }} install"
  args:
    chdir: "{{ prefix }}/src/build"
    creates: "{{ prefix }}/include/c++/{{ GCCVER }}/cxxabi.h"

- name: Disable collections
  set_fact:
    collections_enabled: false

- name: Disable devtoolset
  file:
    path: /etc/profile.d/devtoolset.sh
    state: absent

- name: Cleanup RPMs
  command: yum erase -y gcc-c++ --setopt=clean_requirements_on_remove=1
  args:
    warn: false
  changed_when: false

- name: Cleanup RPMs
  command: yum clean all
  args:
    warn: false
  tags:
    - skip_ansible_lint
    - notest

- name: What is my new compiler?
  shell: "{{ prefix }}/bin/gcc --version"
  register: gcc_version
  changed_when: false
  tags:
    - skip_ansible_lint
    - test

- name: Display details about gcc version
  debug:
    msg: "{{ gcc_version.stdout_lines[0] }}"
  tags:
    - test

- name: Install D_GLIBCXX_USE_CXX11_ABI=1 test case
  template:
    src: cxx_abi_test.cpp
    dest: cxx_abi_test.cpp
    mode: 0644
  tags:
    - test

- name: Run D_GLIBCXX_USE_CXX11_ABI=1 test case
  environment:
    PATH: /usr/local/bin:/bin:/usr/bin
  shell: "{{ prefix }}/bin/g++ -std=c++11 -D_GLIBCXX_USE_CXX11_ABI=1 \
          cxx_abi_test.cpp && ./a.out"
  changed_when: false
  tags:
    - skip_ansible_lint
    - test

- name: Ensure profile file exists
  template:
    src: gcc_local.sh
    dest: /etc/profile.d/gcc_local.sh
    mode: 0644
  tags:
    - config
...
